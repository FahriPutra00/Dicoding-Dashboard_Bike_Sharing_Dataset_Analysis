import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
st.config.set_option("deprecation.showPyplotGlobalUse", False)
st.set_page_config(
    page_title="Bike Sharing Dataset Analysis",
    page_icon="ğŸ“Š",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://www.extremelycoolapp.com/help',
        'Report a bug': "https://www.extremelycoolapp.com/bug",
        'About': "Bike Sharing Dataset Analysis"
    }
)
# Title of the Dashboard
st.title('Bike Sharing Dataset Analysis')
st.write('Bike sharing systems are new generation of traditional bike rentals where whole process from membership, rental and return back has become automatic. Through these systems, user is able to easily rent a bike from a particular position and return back at another position. Currently, there are about over 500 bike-sharing programs around the world which is composed of over 500 thousands bicycles. Today, there exists great interest in these systems due to their important role in traffic, environmental and health issues.')
st.write('Apart from interesting real world applications of bike sharing systems, the characteristics of data being generated by these systems make them attractive for the research. Opposed to other transport services such as bus or subway, the duration of travel, departure and arrival position is explicitly recorded in these systems. This feature turns bike sharing system into a virtual sensor network that can be used for sensing mobility in the city. Hence, it is expected that most of important events in the city could be detected via monitoring these data.')
st.write('Both hour.csv and day.csv have the following fields, except hr which is not available in day.csv \n- instant: record index\n- dteday : date\n- season : season (1=springer, 2=summer, 3=fall, 4=winter) \n- yr : year (0: 2011, 1:2012)\n- mnth : month ( 1 to 12)\n- hr : hour (0 to 23)\n- holiday : weather day is holiday or not (extracted from http://dchr.dc.gov/page/holiday-schedule)\n- weekday : day of the week\n- workingday : if day is neither weekend nor holiday is 1, otherwise is 0\n+ weathersit : \n	- 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n	- 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n	- 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n	- 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog\n- temp : Normalized temperature in Celsius. The values are divided to 41 (max)\n- atemp: Normalized feeling temperature in Celsius. The values are divided to 50 (max)\n- hum: Normalized humidity. The values are divided to 100 (max)\n- windspeed: Normalized wind speed. The values are divided to 67 (max)\n- casual: count of casual users\n- registered: count of registered users\n- cnt: count of total rental bikes including both casual and registered')
# Load the Bike Sharing Dataset
st.subheader("Reading the Dataset")
st.code("hourly_data = pd.read_csv('hour.csv')")
st.code("daily_data = pd.read_csv('day.csv')")
hourly_data = pd.read_csv('DICODING\PY-DATA\hour.csv')
daily_data = pd.read_csv('DICODING\PY-DATA\day.csv')

# Display the raw data
st.header('Raw Data')
col1, col2 = st.columns(2)
with col1:
    st.subheader('Hourly Data')
    st.write(hourly_data.head())
with col2:
    st.subheader('Daily Data')
    st.write(daily_data.head())
# Display the characteristics of the data
st.title('Characteristics of the Data')

# Information about Hourly Data
st.header('Hourly Data Characteristics')
st.write('Number of Rows:', hourly_data.shape[0])
st.write('Number of Columns:', hourly_data.shape[1])
col1, col2 = st.columns(2)
with col1:
    st.subheader('Data Types of Columns')
    st.write(hourly_data.dtypes)
with col2:
    st.subheader('Summary of Columns')
    st.write(hourly_data.describe(include='all'))

# Information about Daily Data
st.header('Daily Data Characteristics')
st.write('Number of Rows:', daily_data.shape[0])
st.write('Number of Columns:', daily_data.shape[1])
col1, col2 = st.columns(2)
with col1:  
    st.subheader('Data Types of Columns')
    st.write(daily_data.dtypes)
with col2:
    st.subheader('Summary of Columns')
    st.write(daily_data.describe(include='all'))

st.subheader('Checking Outliers')
col1, col2 = st.columns(2)
with col1:
    st.subheader('Hourly Data')
    plt.figure(figsize=(8, 6))
    sns.boxplot(data=daily_data[['temp', 'atemp', 'hum', 'windspeed']])
    plt.title('Boxplot untuk Data Cuaca')
    plt.xlabel('Variabel Cuaca')
    plt.ylabel('Nilai')
    st.pyplot()
with col2:
    st.subheader('Daily Data')
    plt.figure(figsize=(8, 6))
    sns.boxplot(data=daily_data[['temp', 'atemp', 'hum', 'windspeed']])
    plt.title('Boxplot untuk Data Cuaca')
    plt.xlabel('Variabel Cuaca')
    plt.ylabel('Nilai')
    st.pyplot()
#SMART QUESTION
st.header('Smart Question')
st.write('- Bagaimana pengaruh dari variabel cuaca seperti temperatur, kelembaban, dan kondisi cuaca terhadap jumlah penyewaan sepeda?')
st.write('- Berapa perubahan dalam jumlah penyewaan sepeda berdasarkan musim (springer, summer, fall, winter) dari tahun 2011 ke tahun 2012?')
st.write('- Bagaimana tren jumlah penyewaan sepeda per bulan dari musim ke musim dalam rentang waktu tahun 2011 hingga 2012?')
# Data Exploration
# Data Cleaning
st.header('Data Cleaning')
st.subheader('Convert the Data Types')
st.code("hourly_data['dteday'] = pd.to_datetime(hourly_data['dteday']).dt.strftime('%Y-%m-%d')")
st.code("daily_data['dteday'] = pd.to_datetime(daily_data['dteday']).dt.strftime('%Y-%m-%d')")
# Convert 'dteday' column to datetime format and then convert to string (without time)
hourly_data['dteday'] = pd.to_datetime(hourly_data['dteday']).dt.strftime('%Y-%m-%d')
daily_data['dteday'] = pd.to_datetime(daily_data['dteday']).dt.strftime('%Y-%m-%d')

st.subheader('Drop unnecessary columns')
st.code("hourly_data = hourly_data.drop(['instant', 'atemp'], axis=1)")
st.code("daily_data = daily_data.drop(['instant', 'atemp'], axis=1)")
# Drop unnecessary columns
hourly_data = hourly_data.drop(['instant', 'atemp'], axis=1)
daily_data = daily_data.drop(['instant', 'atemp'], axis=1)

# Calculate IQR
Q1 = hourly_data['hum'].quantile(0.25)
Q3 = hourly_data['hum'].quantile(0.75)
IQR = Q3 - Q1

# Define lower and upper bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Filter outliers
hourly_data = hourly_data[(hourly_data['hum'] >= lower_bound) & (hourly_data['hum'] <= upper_bound)]
daily_data = daily_data[(daily_data['hum'] >= lower_bound) & (daily_data['hum'] <= upper_bound)]
col1, col2 = st.columns(2)
with col1:
    st.subheader('Hourly Data')
    plt.figure(figsize=(8, 6))
    sns.boxplot(data=daily_data[['temp', 'hum', 'windspeed']])
    plt.title('Boxplot untuk Data Cuaca')
    plt.xlabel('Variabel Cuaca')
    plt.ylabel('Nilai')
    st.pyplot()
with col2:
    st.subheader('Daily Data')
    plt.figure(figsize=(8, 6))
    sns.boxplot(data=daily_data[['temp', 'hum', 'windspeed']])
    plt.title('Boxplot untuk Data Cuaca')
    plt.xlabel('Variabel Cuaca')
    plt.ylabel('Nilai')
    st.pyplot()
# Check for missing values
st.subheader('Missing Values Check & Data Type Check')
st.code("hourly_data.isnull().sum()")
st.code("daily_data.isnull().sum()")
col1, col2, col3, col4 = st.columns(4)
with col1:
    st.write('Hourly Data:', hourly_data.isnull().sum())
with col2:
    st.write('Daily Data:', daily_data.isnull().sum())
with col3:
    st.write(hourly_data.dtypes)
with col4:
    st.write(daily_data.dtypes)
st.subheader('Cleaned Data')
col1, col2 = st.columns(2)
with col1:
    st.subheader('Hourly Data')
    st.write(hourly_data)
with col2:
    st.subheader('Daily Data')
    st.write(daily_data)
# Data Visualization
st.header('Data Visualization')

st.subheader('Pengaruh Variabel terhadap Jumlah Penyewaan Sepeda')
st.write('Bagaimana pengaruh dari variabel cuaca seperti temperatur, kelembaban, dan kondisi cuaca terhadap jumlah penyewaan sepeda?')
col1, col2 = st.columns(2)
with col1:
# Plotting the scatter plot
    st.subheader('Hourly Data')
    plt.figure(figsize=(10, 8))
    sns.scatterplot(data=hourly_data, x='hum', y='temp', size='cnt', hue='weathersit', palette='viridis', sizes=(20, 200))
    plt.title('Pengaruh Variabel Cuaca terhadap Jumlah Penyewaan Sepeda')
    plt.xlabel('Humidity')
    plt.ylabel('Temperature')
    plt.legend(title='Weather Situation')
    plt.show()
    st.pyplot()
with col2:
    st.subheader('Daily Data')
    plt.figure(figsize=(10, 8))
    sns.scatterplot(data=daily_data, x='hum', y='temp', size='cnt', hue='weathersit', palette='viridis', sizes=(20, 200))
    plt.title('Pengaruh Variabel Cuaca terhadap Jumlah Penyewaan Sepeda')
    plt.xlabel('Humidity')
    plt.ylabel('Temperature')
    plt.legend(title='Weather Situation')
    plt.show()
    st.pyplot()
    
st.subheader('Perubahan Jumlah Penyewaan Sepeda dari Tahun 2011 ke Tahun 2012 pada setiap musim')
# Plotting the bar plot
st.write('Berapa perubahan dalam jumlah penyewaan sepeda berdasarkan musim (springer, summer, fall, winter) dari tahun 2011 ke tahun 2012?')
col1, col2 = st.columns(2)
with col1:
    st.subheader('Hourly Data')
    plt.figure(figsize=(8, 6))
    ax = sns.barplot(data=hourly_data, x='season', y='cnt', hue='yr', palette='viridis')
    plt.title('Perubahan Jumlah Penyewaan Sepeda dari Tahun 2011 ke Tahun 2012 pada setiap musim')
    plt.xlabel('Musim')
    plt.ylabel('Jumlah Penyewaan Sepeda')
    handles, labels = ax.get_legend_handles_labels()
    ax.legend(handles, ['2011', '2012'], title='Tahun')
    #add value labels
    rects = ax.patches
    labels = hourly_data.groupby(['season', 'yr'])['cnt'].sum().values
    for rect, label in zip(rects, labels):
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2, height + 5, label, ha='center', va='bottom')
        
    plt.tight_layout()
    plt.show()
    st.pyplot()
with col2:
    st.subheader('Daily Data')
    plt.figure(figsize=(8, 6))
    ax = sns.barplot(data=daily_data, x='season', y='cnt', hue='yr', palette='viridis')
    plt.title('Perubahan Jumlah Penyewaan Sepeda dari Tahun 2011 ke Tahun 2012 pada setiap musim')
    plt.xlabel('Musim')
    plt.ylabel('Jumlah Penyewaan Sepeda')
    handles, labels = ax.get_legend_handles_labels()
    ax.legend(handles, ['2011', '2012'], title='Tahun')
    #add value labels
    rects = ax.patches
    labels = daily_data.groupby(['season', 'yr'])['cnt'].sum().values
    for rect, label in zip(rects, labels):
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2, height + 5, label, ha='center', va='bottom')
        
    plt.tight_layout()
    plt.show()
    st.pyplot()

